import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { User } from '../types';
import { authAPI } from '../services/api';

interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<boolean>;
  logout: () => void;
  isAuthenticated: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    // V√©rifier si l'utilisateur est d√©j√† connect√©
    const savedUser = localStorage.getItem('user');
    const authToken = localStorage.getItem('authToken');
    
    // V√©rifier que les donn√©es existent et ne sont pas "undefined"
    if (savedUser && savedUser !== 'undefined' && savedUser !== 'null' && authToken && authToken !== 'undefined') {
      try {
        const parsedUser = JSON.parse(savedUser);
        if (parsedUser && parsedUser.id) {
          setUser(parsedUser);
          console.log('üîê Utilisateur restaur√© depuis localStorage:', parsedUser);
        } else {
          console.log('‚ùå Donn√©es utilisateur invalides, nettoyage...');
          localStorage.removeItem('user');
          localStorage.removeItem('authToken');
        }
      } catch (error) {
        console.error('Erreur lors du parsing des donn√©es utilisateur:', error);
        // Nettoyer les donn√©es corrompues
        localStorage.removeItem('user');
        localStorage.removeItem('authToken');
      }
    } else {
      // Nettoyer les donn√©es invalides
      if (savedUser === 'undefined' || authToken === 'undefined') {
        console.log('üßπ Nettoyage des donn√©es "undefined" du localStorage');
        localStorage.removeItem('user');
        localStorage.removeItem('authToken');
      }
    }
  }, []);

  const login = async (email: string, password: string): Promise<boolean> => {
    try {
      console.log('üîë Tentative de connexion pour:', email);
      // Appel API r√©el avec Django backend
      const response = await authAPI.login(email, password);
      
      console.log('üì° R√©ponse API login:', response);
      
      if (response.success) {
        const userData = response.data.data.user;
        const token = response.data.data.token;
        
        // V√©rifier que les donn√©es sont valides avant de les stocker
        if (userData && userData.id && token) {
          console.log('‚úÖ Donn√©es de connexion valides:', { user: userData, token: token.substring(0, 20) + '...' });
          
          setUser(userData);
          localStorage.setItem('user', JSON.stringify(userData));
          localStorage.setItem('authToken', token);
          
          console.log('üíæ Donn√©es stock√©es dans localStorage');
        } else {
          console.error('‚ùå Donn√©es de connexion invalides:', response.data);
          return false;
        }
        
        // Forcer la mise √† jour de l'interface
        setTimeout(() => {
          console.log('üîÑ D√©clenchement de l\'√©v√©nement userChanged');
          window.dispatchEvent(new Event('userChanged'));
        }, 100);
        
        return true;
      } else {
        console.error('‚ùå √âchec de la connexion:', response);
        return false;
      }
    } catch (error) {
      console.error('Erreur de connexion:', error);
      return false;
    }
  };

  const logout = async () => {
    try {
      console.log('üö™ D√©connexion en cours...');
      await authAPI.logout();
    } catch (error) {
      console.error('Erreur de d√©connexion:', error);
    }
    
    setUser(null);
    localStorage.removeItem('user');
    localStorage.removeItem('authToken');
    console.log('üßπ Donn√©es de session supprim√©es');
    
    // Forcer la mise √† jour de l'interface
    setTimeout(() => {
      console.log('üîÑ D√©clenchement de l\'√©v√©nement userChanged (logout)');
      window.dispatchEvent(new Event('userChanged'));
    }, 100);
  };

  const value = {
    user,
    login,
    logout,
    isAuthenticated: !!user,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth doit √™tre utilis√© dans un AuthProvider');
  }
  return context;
};